#! /usr/bin/perl

############################################################################
#    Copyright (C) 2013 by Ralf 'Decan' Kaestner                           #
#    ralf.kaestner@gmail.com                                               #
#                                                                          #
#    This program is free software; you can redistribute it and#or modify  #
#    it under the terms of the GNU General Public License as published by  #
#    the Free Software Foundation; either version 2 of the License, or     #
#    (at your option) any later version.                                   #
#                                                                          #
#    This program is distributed in the hope that it will be useful,       #
#    but WITHOUT ANY WARRANTY; without even the implied warranty of        #
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the         #
#    GNU General Public License for more details.                          #
#                                                                          #
#    You should have received a copy of the GNU General Public License     #
#    along with this program; if not, write to the                         #
#    Free Software Foundation, Inc.,                                       #
#    59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.             #
############################################################################

use Getopt::Std;

getopts("hqo:c:nNp:v:d:u:a:w:");

use Cwd;
use File::Find;
use File::Glob;
use File::Basename;
use File::Path;
use Date::Parse;
use Date::Format;

my $generator = "remake-git2debcl";

my $cl_path = $ARGV[0];
my $cl_output = $opt_o;
my $cl_commits = $opt_c;
my $cl_project = $opt_p;
my $cl_version = $opt_v;
my $cl_distribution = $opt_d;
my $cl_urgency = $opt_u;
my $cl_width = $opt_w;
my $cl_help = $opt_h;
my $cl_quiet = $opt_q;
my $cl_renumber = $opt_n;
my $cl_number = $opt_N;

sub print_stdout {
  print STDOUT @_;
}

sub print_stderr {
  if (!$cl_quiet) {
    print STDERR @_;
  }
}

sub print_stdopt {
  my $option = shift;
  my $description = shift;

  my $length = length($option);
  my $indent = 30-$length;

  print_stdout "  $option".' 'x$indent."$description\n";
}

sub print_help {
  print_stdout "usage: $generator [OPT1 [OPT2 [...]]] [PATH]\n";
  print_stdout "\033[1mConvert Git log to Debian changelog\033[0m\n";
  print_stdopt "PATH", "path to working copy [.]";
  print_stdopt "OPT1 OPT2 ...", "list of options as given below [default]";
  print_stdopt "-h", "display usage and exit [false]";
  print_stdopt "-q", "do not generate any output [false]";
  print_stdopt "-o FILE|-", "optional output file or STDOUT [changelog]";
  print_stdopt "-c [COMMIT1:]COMMIT2", "first and last commit [TAIL:HEAD]";
  print_stdopt "-n", "renumber commits [false]";
  print_stdopt "-N", "number project revision by commit [false]";
  print_stdopt "-p NAME", "project name [guess from repository]";
  print_stdopt "-v VERSION", "project version [guess from repository]";
  print_stdopt "-d DISTRIBUTION", "project distribution [unstable]";
  print_stdopt "-u URGENCY", "project urgency [low]";
  print_stdopt "-w WIDTH", "message format output width [70]";
}

sub parse_git {
  my $repository = shift;
  my $project = shift;
  my $commits = shift;

  $root =
    `cd $$repository{path} && git rev-parse --show-toplevel 2> /dev/null` or
    die "Error: $$repository{path} is not a working copy\n";
  $root =~ s/([^\n]+)\n/\1/s;
  $$repository{root} = $root;
  $$repository{root} =~ s/.*Repository Root:\s*([^\s]+)\n.*/\1/s;
  print_stderr "$generator: Repository root is $$repository{root}\n";

  $lines =
    `cd $$repository{path} && git rev-list --max-parents=0 HEAD 2> /dev/null` or
    die "Error: $$repository{path} is not a working copy\n";
  @tails = split(/\n/, $lines);
  $tail = $tails[-1];
  if (!$$repository{tail}) {
    $$repository{tail} = $tail;
  }
  $commit_lines = 
    `cd $$repository{path} && git rev-list $$repository{tail} 2> /dev/null`;
  print_stderr "$generator: Repository tail commit is $tail\n";
  
  $head = `cd $$repository{path} && git rev-parse HEAD 2> /dev/null` or
    die "Error: $$repository{path} is not a working copy\n";
  $head =~ s/([^\n]+)\n/\1/s;
  if (!$$repository{head}) {
    $$repository{head} = $head;
  }
  $commit_lines = 
    `cd $$repository{path} && git rev-list $$repository{head} 2> /dev/null`;
  print_stderr "$generator: Repository head commit is $head\n";

  if (!$$project{name}) {
    $$project{name} = $$repository{root};
    $$project{name} =~ s/^.*?([^\/]+)$/\1/;
  }
  print_stderr "$generator: Project name is $$project{name}\n";

  $commit_range = "$$repository{tail}...$$repository{head}";
  $commit_lines =
    `cd $$repository{path} && git rev-list $commit_range 2> /dev/null` or
    die "Error: $$repository{path} is not a working copy\n";
  my @commit_list = split(/\n/, $commit_lines);
  push(@commit_list, $$repository{tail});
  @commit_list = reverse(@commit_list);
  
  my $skipped = 0;
  if ($cl_renumber) {
    $skipped = grep { $commit_list[$_] eq $$repository{tail} } 0..$#commit_list;
    $skipped = $skipped-1;
  }

  my $version = $$project{version};  
  foreach $hash (@commit_list) {
    my($number)= grep { $commit_list[$_] eq $hash } 0..$#commit_list;
    $number = $number+1;
  
    my $lists =
      `cd $$repository{path} && git show $hash:CMakeLists.txt 2> /dev/null`;
    if (($? == 0) and ($lists =~ /.*remake_project\(.*?\).*/s)) {
      $lists =~ s/.*remake_project\((.*?)\).*/\1/s;
      $version = $lists;

      $version =~
        /[\n\s]*[^\s]+[\n\s]*(VERSION)?[\n\s]*([^\s]+).*/s;
      $version = $2;      
    }
  
    my %commit;
    $commit{hash} = $hash;
    $commit{number} = $number;
    $commit{version} = $version;
    if ($cl_number) {
      my $version_rev = $number-$skipped;
      $commit{version} .= "-$version_rev";
    }
    $commit{empty} = 1;

    $log = `cd $$repository{path} && git log -n 1 $hash 2> /dev/null`;
    if ($? == 0) {
      my @lines = split(/\n/, $log);
      foreach $line (@lines) {
        if ($line =~ /Author:\s*(.*)/) {
          $commit{author} = $line;
          $commit{author} =~ s/^Author:\s*(.*)/\1/;
        }        
        if ($line =~ /Date:\s*(.*)/) {
          $time = $line;
          $time =~ s/^Date:\s*(.*)/\1/;
          $commit{time} = str2time($time);
        }
      }
      my @message = @lines[4..(@lines-1)];
      my $stripped = join("\n", @message);
      $stripped =~ s/^[\s]*\n//mg;
      $stripped =~ s/^[\s]{4}//mg;
      if (not $stripped eq "") {
        $commit{empty} = 0;
        @{$commit{message}} = split(/\n/, $stripped);
      }
      if ($number == 250) {
        print "$stripped\n";
      }      
    }
    
    if (!$commit{empty}) {
      print_stderr "$generator: Commit $commit{hash}: ".
        "$$project{name} ($commit{version}) $$project{distribution}; ".
        "urgency=$$project{urgency}\n";
    }
    else {
      print_stderr "$generator: Commit $commit{number}: empty\n";

      if ($cl_renumber) {
        $skipped += 1;
      }
    }
    
    %{$$commits{$number}} = %commit;
  }
}

sub generate_debcl {
  my $changelog = shift;
  my $repository = shift;
  my $project = shift;
  my $commits = shift;
  my $width = shift;

  $$changelog = "";
  my @numbers = sort { $b <=> $a } keys(%$commits);
  foreach $number (@numbers) {
    if (!$$commits{$number}{empty}) {
      if ($$changelog) {
        $$changelog .= "\n";
      }

      $$changelog .= "$$project{name} ($$commits{$number}{version}) ".
        "$$project{distribution}; urgency=$$project{urgency}\n";
      $$changelog .= "\n";

      foreach $line (@{$$commits{$number}{message}}) {
        if ($line =~ /^[a-zA-Z0-9]/) {
          $line = "  * $line";
        }
        else {
          $line = "  $line";
        }

        my $min = $width-10;
        $format = '(.{'.$min.','.$width.'}\s+[^\s]*)\s+';
        $line =~ s/$format/$1\n/g;
        $line =~ /[a-zA-Z0-9]/;
        my $indent = ' 'x$-[0];
        $line =~ s/\n/\n$indent/mg;
        $$changelog .= "$line\n";
      }

      $$changelog .= "\n";
      $time = time2str("%a, %d %b %Y %H:%M:%S %z", $$commits{$number}{time});
      $$changelog .= " -- $$commits{$number}{author}  $time\n";
    }
  }
}

my %repository;
my %project;
my %commits;
my $changelog;

if ($cl_help) {
  print_help();
  exit 0;
}

if ($cl_path) {
  $repository{path} = Cwd::abs_path($cl_path);
}
else {
  $repository{path} = Cwd::abs_path(".");
}

if ($cl_commits) {
  if ($cl_commits =~ /^[0-9a-f]+:[0-9a-f]+$/) {
    $repository{tail} = $cl_commits;
    $repository{head} = $cl_commits;

    $repository{tail} =~ s/^([0-9a-f]+):([0-9a-f]+)$/\1/;
    $repository{head} =~ s/^([0-9a-f]+):([0-9a-f]+)$/\2/;
  }
  elsif ($cl_commits =~ /^[0-9a-f]+$/) {
    $repository{head} = $cl_commits;
  }
}

if ($cl_project) {
  $project{name} = $cl_project;
}

if ($cl_version) {
  $project{version} = $cl_version;
}
else {
  $project{version} = "0.1";
}

if ($cl_distribution) {
  $project{distribution} = $cl_distribution;
}
else {
  $project{distribution} = "unstable";
}

if ($cl_urgency) {
  $project{urgency} = $cl_urgency;
}
else {
  $project{urgency} = "low";
}

if (!$cl_width) {
  $cl_width = 70;
}

if (!$cl_output) {
  $cl_output = "changelog";
}

parse_git(\%repository, \%project, \%commits);
generate_debcl(\$changelog, \%repository, \%project, \%commits, $cl_width);

if ($cl_output =~ /\-/) {
  print_stdout $changelog;
}
else {
  open(file, "> $cl_output") or
    die("Error: $!\n");
  print file $changelog;
  close(file);
}
