############################################################################
#    Copyright (C) 2013 by Ralf Kaestner                                   #
#    ralf.kaestner@gmail.com                                               #
#                                                                          #
#    This program is free software; you can redistribute it and#or modify  #
#    it under the terms of the GNU General Public License as published by  #
#    the Free Software Foundation; either version 2 of the License, or     #
#    (at your option) any later version.                                   #
#                                                                          #
#    This program is distributed in the hope that it will be useful,       #
#    but WITHOUT ANY WARRANTY; without even the implied warranty of        #
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the         #
#    GNU General Public License for more details.                          #
#                                                                          #
#    You should have received a copy of the GNU General Public License     #
#    along with this program; if not, write to the                         #
#    Free Software Foundation, Inc.,                                       #
#    59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.             #
############################################################################

include(ReMakeFile)
include(ReMakeFind)
include(ReMakeTarget)

include(ReMakePrivate)

### \brief ReMake testing macros
#   The ReMake testing module provides unit testing support.

if(NOT DEFINED REMAKE_TEST_CMAKE)
  remake_set(REMAKE_TEST_CMAKE ON)

  remake_set(REMAKE_TEST_ALL_TARGET test)
  remake_set(REMAKE_TEST_TARGET_SUFFIX test)

  remake_set(REMAKE_TEST_DIR ReMakeTesting)
  remake_file_rmdir(${REMAKE_TEST_DIR} TOPLEVEL)
endif(NOT DEFINED REMAKE_TEST_CMAKE)

### \brief Generate a test for an executable target.
#   This macro generates a unit test for an existing executable target
#   named ${TARGET}. It therfore defines a new testing target
#   ${TARGET}_${REMAKE_TEST_TARGET_SUFFIX} through a call to remake_test()
#   which executes the output binary upon invocation. Note that execution
#   of the testing target implicitly fails with a non-zero return value.
#   \required[value] target The name of an existing executable target for
#     which to generate the test.
macro(remake_test_target test_target)
  get_target_property(test_command ${test_target} LOCATION)
  remake_test(
    ${test_name}
    ${test_command}
    DEPENDS ${test_target}
    DESCRIPTION "executable target")
endmacro(remake_test_target)

### \brief Generate a Python nose test.
#   This macro generates a Python nose unit test. It therefore defines a
#   new testing target ${NAME}_${REMAKE_TEST_TARGET_SUFFIX} for the Python
#   nose test script ${NAME}.${EXT} through a call to remake_test().
#   \required[value] filename The filename of the Python nose test script
#     to be executed for testing.
#   \optional[value] NAME:name The optional name of the Python nose test,
#     defaulting to python_nose. Note that, for the resulting testing target
#     to not be multiply defined, a unique name must be chosen for each nose
#     test generated by the project.
#   \optional[value] MODULE_PATH:dir The optional name of the directory
#     containing the required Python modules for the nose test, defaulting
#     to ${CMAKE_CURRENT_SOURCE_DIR}.
macro(remake_test_python_nose test_filename)
  remake_arguments(PREFIX test_ VAR NAME VAR MODULE_PATH ${ARGN})
  remake_set(test_name SELF DEFAULT python_nose)
  remake_set(test_module_path SELF DEFAULT ${CMAKE_CURRENT_SOURCE_DIR})
  
  remake_find_executable(nosetests)  
  if(IS_ABSOLUTE ${test_filename})
    remake_set(test_script ${test_filename})
  else(IS_ABSOLUTE ${test_filename})
    remake_set(test_script ${CMAKE_CURRENT_SOURCE_DIR}/${test_filename})
  endif(IS_ABSOLUTE ${test_filename})
  
  if(NOT IS_ABSOLUTE ${test_module_path})
    remake_set(test_module_path
      ${CMAKE_CURRENT_SOURCE_DIR}/${test_module_path})
  endif(NOT IS_ABSOLUTE ${test_module_path})
  
  remake_test(
    ${test_name}
    PYTHONPATH=${test_module_path} ${NOSETESTS_EXECUTABLE} -v ${test_script}
    DEPENDS ${test_filename}
    DESCRIPTION "Python nose")
endmacro(remake_test_python_nose)

### \brief Define a testing target.
#   This macro is a helper macro to define testing targets for all requested
#   test types. It associates the testing command with a new testing target
#   ${NAME}_${REMAKE_TEST_TARGET_SUFFIX} named after the specified test. This
#   command is modified such that all output generated by the test will be
#   written into a log file. Note that a call to the testing target implicitly
#   fails with a non-zero return value of the executed testing command.
#   \required[value] name The name of an existing executable target for
#     which to generate the test.
#   \required[value] command The testing command to be executed.
#   \optional[list] arg An optional list of arguments to the testing command.
#   \optional[list] DEPENDS:depend An optional list of file or target
#     dependencies for the testing target.
#   \optional[value] DESCRIPTION:string An optional descripition of the
#     testing target.
macro(remake_test test_name test_command)
  remake_arguments(PREFIX test_ LIST DEPENDS VAR DESCRIPTION ARGN args ${ARGN})
  if(NOT TARGET ${REMAKE_TEST_ALL_TARGET})
    remake_target(${REMAKE_TEST_ALL_TARGET})
  endif(NOT TARGET ${REMAKE_TEST_ALL_TARGET})
  if(NOT EXISTS ${REMAKE_TEST_DIR})
    remake_file_mkdir(${REMAKE_TEST_DIR} TOPLEVEL)
  endif(NOT EXISTS ${REMAKE_TEST_DIR})
  
  remake_target_name(test_target ${test_name} ${REMAKE_TEST_TARGET_SUFFIX})
  remake_file_name(test_log ${test_name})
  remake_file(test_stdout_log ${REMAKE_TEST_DIR}/${test_log}.stdout.log
    TOPLEVEL)
  remake_file(test_stderr_log ${REMAKE_TEST_DIR}/${test_log}.stderr.log
    TOPLEVEL)
  
  remake_set(test_comment "Running test ${test_name}")
  if(test_description)
    remake_set(test_comment "${test_comment} (${test_description})")
  endif(test_description)
  
  remake_target(
    ${test_target}
    COMMAND ${test_command} ${test_args} 1> ${test_stdout_log}
      2> ${test_stderr_log}
    COMMENT ${test_comment}
    ${DEPENDS})
  add_dependencies(${REMAKE_TEST_ALL_TARGET} ${test_target})
endmacro(remake_test)
