############################################################################
#    Copyright (C) 2009 by Ralf 'Decan' Kaestner                           #
#    ralf.kaestner@gmail.com                                               #
#                                                                          #
#    This program is free software; you can redistribute it and#or modify  #
#    it under the terms of the GNU General Public License as published by  #
#    the Free Software Foundation; either version 2 of the License, or     #
#    (at your option) any later version.                                   #
#                                                                          #
#    This program is distributed in the hope that it will be useful,       #
#    but WITHOUT ANY WARRANTY; without even the implied warranty of        #
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the         #
#    GNU General Public License for more details.                          #
#                                                                          #
#    You should have received a copy of the GNU General Public License     #
#    along with this program; if not, write to the                         #
#    Free Software Foundation, Inc.,                                       #
#    59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.             #
############################################################################

include(ReMakePrivate)
include(ReMakeComponent)
include(ReMakePack)

### \brief ReMake distribution macros
#   The ReMake distribution macros facilitate automated distribution of
#   a ReMake project.

remake_set(REMAKE_DISTRIBUTE_TARGET distribution)

remake_file(REMAKE_DISTRIBUTE_DIR ReMakeDistributions TOPLEVEL)

### \brief Distribute a ReMake project according to the Debian standards.
#   This macro configures source package distribution for a ReMake project
#   under the Debian standards. Therefore, it generates a TGZ source archive
#   from the project by calling remake_pack_source_archive(). Moreover, the
#   macro takes care of creating all configuration files commonly required
#   for source packaging under the debian directory. The distribution is
#   then build from the sources by calling 'dpkg-buildpackage -S'. Note
#   that the distribution may define multiple binaries, one for each Debian
#   package defined by remake_pack_deb().
#   \optional[value] SECTION:section The archive area and section of the
#     distributed project, defaults to misc. See the Debian policies for
#     naming conventions, and consult the archive maintainer for a list
#     of valid areas and sections.
#   \optional[value] PRIORITY:priority The priority of the distributed
#     project, defaults to extra. See the Debian policies for valid priority
#     levels.
#   \optional[value] CHANGELOG:file The name of the changelog file to be
#     distributed with the sources, defaults to ${REMAKE_PROJECT_CHANGELOG}.
#     Note that the provided changelog file must follow the Debian standards
#     and should provide correct version information, the distribution name,
#     and the urgency level. The macro validates the information provided
#     in the changelog file against the current project settings and the
#     parameters provided, giving a fatal error in case of a mismatch. For
#     details about the standards and valid changelog properties, read the
#     Debian policy manual.
#   \optional[value] DISTRIBUTION:distribution The name of the distribution
#     for which the packages should be built, defaults to unstable. This
#     parameter is only used for validating the information contained in
#     the changelog prior to configuring the source package. Consult the
#     archive maintainers for valid distribution names.
#   \optional[value] URGENCY:urgency The urgency of upgrading the distributed
#     packages from previous versions, defaults to low.  This parameter is
#     only used for validating the information contained in the changelog
#     prior to configuring the source package. See the Debian policies for
#     valid urgency values.
#   \optional[value] COMPATIBILITY:compatibility The debhelper compatibility
#     level, defaults to 7. See the debhelper documentation for valid
#     compatibility levels. Changing the compatibility to levels other than
#     7 is not recommended here, as the configuration files generated by
#     ReMake may not be compatible with earlier versions of debhelper.
#   \optional[list] DEPENDS:dep An optional list of build dependencies for the
#     distribution, containing any packages in addition to debhelper and
#     cmake. The format of a dependency should comply to Debian conventions,
#     meaning that the dependency is of the form ${PACKAGE} [(>= ${VERSION})].
#   \optional[list] PASS:var An optional list containing the names of
#     defined CMake variables. The macro will pass the given variable names
#     and values during the configuration stage of the distribution.
#     By default, the variables CMAKE_BUILD_TYPE, CMAKE_INSTALL_PREFIX, and
#     CMAKE_INSTALL_RPATH are included in the list.
#   \optional[list] DEFINE:var An optional list of variable names and values
#     of the form ${VAR}=${VALUE} to be passed during the configuration
#     stage of the distribution.
macro(remake_distribute_deb)
  remake_arguments(PREFIX distribute_ VAR SECTION VAR PRIORITY
    VAR CHANGELOG VAR DISTRIBUTION VAR URGENCY VAR COMPATIBILITY
    VAR UPLOAD LIST COMPONENT LIST DEPENDS LIST PASS LIST DEFINE ${ARGN})
  remake_set(distribute_section SELF DEFAULT misc)
  remake_set(distribute_priority SELF DEFAULT extra)
  remake_set(distribute_changelog SELF DEFAULT ${REMAKE_PROJECT_CHANGELOG})
  remake_set(distribute_distribution SELF DEFAULT stable)
  remake_set(distribute_urgency SELF DEFAULT low)
  remake_set(distribute_compatibility SELF DEFAULT 7)
  remake_set(distribute_pass SELF
    DEFAULT CMAKE_BUILD_TYPE CMAKE_INSTALL_PREFIX CMAKE_INSTALL_RPATH)

  remake_file_read(distribute_changelog_content ${distribute_changelog})
  string(REGEX REPLACE "([^\\\n]+).*" "\\1" distribute_changelog_header
    "${distribute_changelog_content}")
  string(REGEX REPLACE "[ ;]+" ";" distribute_changelog_parameters
    ${distribute_changelog_header})
  remake_set(distribute_parameters ${REMAKE_PROJECT_FILENAME}
    "(${REMAKE_PROJECT_VERSION})" ${distribute_distribution}
    "urgency=${distribute_urgency}")

  if(NOT "${distribute_changelog_parameters}" STREQUAL
      "${distribute_parameters}")
    message(FATAL_ERROR "Changelog not consistent with the project settings!")
  endif(NOT "${distribute_changelog_parameters}" STREQUAL
    "${distribute_parameters}")

  remake_file(distribute_package_dir ${REMAKE_PACK_DIR}/DEB)
  remake_file_glob(distribute_packages *.cpack
    WORKING_DIRECTORY ${distribute_package_dir} FILES)

  if(distribute_packages)
    if(NOT TARGET ${REMAKE_DISTRIBUTE_TARGET})
      remake_target(${REMAKE_DISTRIBUTE_TARGET})
    endif(NOT TARGET ${REMAKE_DISTRIBUTE_TARGET})

    execute_process(COMMAND apt-cache show debian-policy
      OUTPUT_VARIABLE distribute_policy OUTPUT_STRIP_TRAILING_WHITESPACE)
    string(REGEX REPLACE
      ".*Version: ([0-9]+).([0-9]+).([0-9]+).*" "\\1.\\2.\\3"
      distribute_version ${distribute_policy})
    remake_list_push(distribute_depends
      "debhelper (>= ${distribute_compatibility})" cmake)
    string(REGEX REPLACE ";" ", " distribute_depends "${distribute_depends}")

    remake_set(distribute_definitions)
    foreach(distribute_var ${distribute_pass})
      remake_set(distribute_definitions
        "${distribute_definitions} -D${distribute_var}=${${distribute_var}}")
    endforeach(distribute_var)
    foreach(distribute_var ${distribute_define})
      remake_set(distribute_definitions
        "${distribute_definitions} -D${distribute_var}")
    endforeach(distribute_var)

    remake_set(distribute_control
      "Source: ${REMAKE_PROJECT_FILENAME}"
      "Section: ${distribute_section}"
      "Priority: ${distribute_priority}"
      "Maintainer: ${REMAKE_PROJECT_ADMIN} <${REMAKE_PROJECT_CONTACT}>"
      "Homepage: ${REMAKE_PROJECT_HOME}"
      "Standards-Version: ${distribute_version}"
      "Build-Depends: ${distribute_depends}")

    remake_set(distribute_rules
      "#! /usr/bin/make -f"
      "export DH_OPTIONS\n"
      "%:"
      "\tdh $@\n"
      "override_dh_auto_configure:"
      "\tdh_auto_configure -- ${distribute_definitions}\n"
      "override_dh_installdocs:"
      "\t\n"
      "override_dh_installchangelogs:"
      "\t\n"
      "override_dh_auto_install:")
    foreach(distribute_package ${distribute_packages})
      include(${distribute_package})

      remake_set(distribute_arch ${CPACK_DEBIAN_PACKAGE_ARCHITECTURE})
      if(NOT ${distribute_arch} STREQUAL "all")
        remake_set(distribute_arch "any")
      endif(NOT ${distribute_arch} STREQUAL "all")
      get_filename_component(distribute_component
        ${distribute_package} NAME_WE)
      remake_set(distribute_install "obj-$(DEB_BUILD_GNU_TYPE)")

      remake_list_push(distribute_control
        "\nPackage: ${CPACK_PACKAGE_NAME}"
        "Architecture: ${distribute_arch}"
        "Depends: ${CPACK_DEBIAN_PACKAGE_DEPENDS}"
        "Description: ${CPACK_PACKAGE_DESCRIPTION_SUMMARY}")
      remake_set(distribute_rule "\tDESTDIR=debian/${CPACK_PACKAGE_NAME}")
      remake_set(distribute_rule
        "${distribute_rule} cmake -DCOMPONENT=${distribute_component}")
      remake_set(distribute_rule
        "${distribute_rule} -P ${distribute_install}/cmake_install.cmake")
      remake_list_push(distribute_rules "${distribute_rule}")

      remake_var_regex(pack_variables "^CPACK_")
      foreach(pack_var ${pack_variables})
        remake_set(${pack_var})
      endforeach(pack_var)
    endforeach(distribute_package ${distribute_packages})

    remake_file(distribute_dir ${REMAKE_DISTRIBUTE_DIR}/debian)
    remake_file_mkdir(${distribute_dir})
    remake_file_write(${distribute_dir}/control LINES ${distribute_control})
    remake_file_write(${distribute_dir}/rules LINES ${distribute_rules})
    remake_file_permissions(${distribute_dir}/rules
      OWNER_EXECUTE OWNER_WRITE OWNER_READ GROUP_EXECUTE GROUP_READ)
    remake_file_write(${distribute_dir}/compat ${distribute_compatibility})

    remake_pack_source_archive(GENERATOR TGZ)
    add_dependencies(${REMAKE_DISTRIBUTE_TARGET}
      ${REMAKE_PACK_ALL_SOURCE_TARGET})

    remake_file_name(distribute_archive
      ${REMAKE_PROJECT_FILENAME}-${REMAKE_PROJECT_FILENAME_VERSION})
    remake_target_add_command(${REMAKE_DISTRIBUTE_TARGET}
      COMMAND tar -xzf ${distribute_archive}.tar.gz
      COMMENT "Extracting ${REMAKE_PROJECT_NAME} source package")

    remake_target_add_command(${REMAKE_DISTRIBUTE_TARGET}
      COMMAND cp -a ${distribute_dir} ${distribute_archive})
    remake_target_add_command(${REMAKE_DISTRIBUTE_TARGET}
      COMMAND cp -a ${distribute_changelog} ${distribute_archive}/debian)

    remake_target_add_command(${REMAKE_DISTRIBUTE_TARGET}
      COMMAND dpkg-buildpackage -S
      WORKING_DIRECTORY ${distribute_archive}
      COMMENT "Building ${REMAKE_PROJECT_NAME} distribution")

    if(distribute_upload)
      remake_set(distribute_prompt
        "Upload distribution to ${distribute_upload} (y/n)?")
      remake_target_add_command(${REMAKE_DISTRIBUTE_TARGET}
        COMMAND read -s -n 1 -p "${distribute_prompt}" &&
          echo && eval test \$REPLY = y VERBATIM)
      remake_file_name(distribute_file ${REMAKE_PROJECT_FILENAME}
        ${REMAKE_PROJECT_FILENAME_VERSION} source.changes)
      remake_target_add_command(${REMAKE_DISTRIBUTE_TARGET}
        COMMAND dput ${distribute_upload} ${distribute_file}
        COMMENT "Uploading ${REMAKE_PROJECT_NAME} distribution")
    endif(distribute_upload)
  endif(distribute_packages)
endmacro(remake_distribute_deb)

remake_file_rmdir(${REMAKE_DISTRIBUTE_DIR})
remake_file_mkdir(${REMAKE_DISTRIBUTE_DIR})
